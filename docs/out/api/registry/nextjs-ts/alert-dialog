{"data":{"files":[{"name":"AlertDialog.tsx","content":"\"use client\" // Directive to indicate that this file is a client-side component if using NextJs.\n\nimport { createContext, forwardRef, HTMLProps, useContext, useState, ReactNode, FC } from 'react';\nimport { cn } from '@/lib/utils';\n\n// Context to manage dialog open/close state\nconst AlertDialogContext = createContext<{\n    isOpen: boolean;\n    setIsOpen: (open: boolean) => void;\n} | null>(null);\n\n// Provider component to manage dialog state\nconst AlertDialogProvider: FC<{ children: ReactNode }> = ({ children }) => {\n    const [isOpen, setIsOpen] = useState(false);\n    return (\n        <AlertDialogContext.Provider value={{ isOpen, setIsOpen }}>\n            {children}\n        </AlertDialogContext.Provider>\n    );\n};\n\n// Main AlertDialog component with state management\nconst AlertDialog = forwardRef<HTMLDivElement, HTMLProps<HTMLDivElement>>(({ children, ...props }, ref) => {\n    return (\n        <AlertDialogProvider>\n            <div ref={ref} {...props}>\n                {children}\n            </div>\n        </AlertDialogProvider>\n    );\n});\n\n// Trigger button to open the dialog\nconst AlertDialogTrigger = forwardRef<HTMLDivElement, HTMLProps<HTMLDivElement>>(({ children, onClick, className = \"\", ...props }, ref) => {\n    const context = useContext(AlertDialogContext);\n    if (!context) throw new Error('AlertDialogTrigger must be used within AlertDialog');\n    \n    return (\n        <div\n            ref={ref}\n            className={cn(\"px-4 py-2 rounded\", className)}\n            onClick={(e) => {\n                context.setIsOpen(true);\n                onClick?.(e);\n            }}\n            {...props}\n        >\n            {children}\n        </div>\n    );\n});\n\n// Content wrapper for the dialog\nconst AlertDialogContent = forwardRef<HTMLDivElement, HTMLProps<HTMLDivElement>>(({ children, className = \"\", ...props }, ref) => {\n    const context = useContext(AlertDialogContext);\n    if (!context) throw new Error('AlertDialogContent must be used within AlertDialog');\n    \n    if (!context.isOpen) return null;\n    \n    return (\n        <div className=\"fixed inset-0 z-50 flex items-center justify-center\">\n            <div className=\"fixed inset-0 bg-black/50\" />\n            <div\n                ref={ref}\n                className={cn(\"relative bg-white rounded-lg shadow-lg p-6 max-w-md w-full mx-4\", className)}\n                {...props}\n            >\n                {children}\n            </div>\n        </div>\n    );\n});\n\n// Header section of the dialog\nconst AlertDialogHeader = forwardRef<HTMLDivElement, HTMLProps<HTMLDivElement>>(({ children, className = \"\", ...props }, ref) => (\n    <div ref={ref} className={cn(\"mb-4\", className)} {...props}>\n        {children}\n    </div>\n));\n\n// Title component\nconst AlertDialogTitle = forwardRef<HTMLHeadingElement, HTMLProps<HTMLHeadingElement>>(({ children, className = \"\", ...props }, ref) => (\n    <h2 ref={ref} className={cn(\"text-lg font-semibold\", className)} {...props}>\n        {children}\n    </h2>\n));\n\n// Description component\nconst AlertDialogDescription = forwardRef<HTMLParagraphElement, HTMLProps<HTMLParagraphElement>>(({ children, className = \"\", ...props }, ref) => (\n    <p ref={ref} className={cn(\"text-sm text-gray-600\", className)} {...props}>\n        {children}\n    </p>\n));\n\n// Footer section of the dialog\nconst AlertDialogFooter = forwardRef<HTMLDivElement, HTMLProps<HTMLDivElement>>(({ children, className = \"\", ...props }, ref) => (\n    <div ref={ref} className={cn(\"mt-6 flex justify-end space-x-2\", className)} {...props}>\n        {children}\n    </div>\n));\n\n// Cancel button\nconst AlertDialogCancel = forwardRef<HTMLDivElement, HTMLProps<HTMLDivElement>>(({ children, onClick, className = \"\", ...props }, ref) => {\n    const context = useContext(AlertDialogContext);\n    if (!context) throw new Error('AlertDialogCancel must be used within AlertDialog');\n    \n    return (\n        <div\n            ref={ref}\n            className={cn(\"px-4 py-2 text-gray-700 bg-gray-100 rounded hover:bg-gray-200\", className)}\n            onClick={(e) => {\n                context.setIsOpen(false);\n                onClick?.(e);\n            }}\n            {...props}\n        >\n            {children}\n        </div>\n    );\n});\n\n// Action button\nconst AlertDialogAction = forwardRef<HTMLDivElement, HTMLProps<HTMLDivElement>>(({ children, onClick, className = \"\", ...props }, ref) => {\n    const context = useContext(AlertDialogContext);\n    if (!context) throw new Error('AlertDialogAction must be used within AlertDialog');\n    \n    return (\n        <div\n            ref={ref}\n            className={cn(\"px-4 py-2 text-white bg-blue-600 rounded hover:bg-blue-700\", className)}\n            onClick={(e) => {\n                context.setIsOpen(false);\n                onClick?.(e);\n            }}\n            {...props}\n        >\n            {children}\n        </div>\n    );\n});\n\nAlertDialog.displayName = 'AlertDialog'\nAlertDialogTrigger.displayName = 'AlertDialogTrigger'\nAlertDialogContent.displayName = 'AlertDialogContent'\nAlertDialogHeader.displayName = 'AlertDialogHeader'\nAlertDialogTitle.displayName = 'AlertDialogTitle'\nAlertDialogDescription.displayName = 'AlertDialogDescription'\nAlertDialogFooter.displayName = 'AlertDialogFooter'\nAlertDialogCancel.displayName = 'AlertDialogCancel'\nAlertDialogAction.displayName = 'AlertDialogAction'\n\nexport {\n    AlertDialog,\n    AlertDialogTrigger,\n    AlertDialogContent,\n    AlertDialogHeader,\n    AlertDialogTitle,\n    AlertDialogDescription,\n    AlertDialogFooter,\n    AlertDialogAction,\n    AlertDialogCancel,\n};","targetPath":"/components/ui/alert-dialog/AlertDialog.tsx"},{"name":"utils.ts","content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","targetPath":"/lib/utils.ts"}],"packages":{"dependencies":{"clsx":"^2.1.1","tailwind-merge":"^3.0.1"},"devDependencies":{}}}}