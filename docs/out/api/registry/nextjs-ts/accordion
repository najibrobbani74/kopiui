{"data":{"files":[{"name":"Accordion.tsx","content":"\"use client\"\n\nimport { cn } from \"@/lib/utils\";\nimport { createContext, FC, forwardRef, HTMLProps, MouseEvent, ReactNode, useContext, useState } from \"react\";\n\nconst Accordion = forwardRef<HTMLDivElement, HTMLProps<HTMLDivElement>>(({ children, className = \"\", ...props }, ref) => {\n    return (\n        <div className={cn(\"border rounded-lg first:border-t-0\", className)} ref={ref} {...props}>\n            {children}\n        </div>\n    );\n});\nAccordion.displayName = \"Accordion\";\n\ninterface AccordionItemProps extends HTMLProps<HTMLDivElement> {\n    defaultOpen?: boolean;\n}\nconst AccordionItem = forwardRef<HTMLDivElement, AccordionItemProps>(({ children, defaultOpen = false, className = \"\", ...props }, ref) => {\n    return (\n        <IsOpenProvider defaultOpen={defaultOpen}>\n            <div ref={ref} className={cn(\"border-t\", className)} {...props}>\n                {children}\n            </div>\n        </IsOpenProvider>\n    );\n});\nAccordionItem.displayName = \"AccordionItem\";\n\nconst AccordionTrigger = forwardRef<HTMLDivElement, HTMLProps<HTMLDivElement>>(({ children, className = \"\", onClick, ...props }, ref) => {\n    const context = useContext(IsOpenContext);\n    if (!context) throw new Error('AccordionTrigger must be used within an AccordionItem');\n    const { isOpen, setIsOpen } = context;\n    function handleClick(e: MouseEvent<HTMLDivElement>) {\n        setIsOpen(!isOpen)\n        onClick && onClick(e)\n    }\n    return (\n        <div onClick={handleClick} className={cn(\"px-4 py-2 flex cursor-pointer justify-between items-center hover:bg-primary/30\", className)} ref={ref} {...props}>\n            <div>\n                {children}\n            </div>\n            <svg\n                style={{\n                    transform: isOpen ? \"rotate(180deg)\" : \"rotate(0deg)\",\n                    transition: \"transform 0.3s\"\n                }}\n                xmlns=\"http://www.w3.org/2000/svg\"\n                className=\"h-5 w-5 ml-auto mr-2\"\n                viewBox=\"0 0 20 20\"\n                fill=\"currentColor\"\n            >\n                <path\n                    fillRule=\"evenodd\"\n                    d=\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\"\n                    clipRule=\"evenodd\"\n                />\n            </svg>\n        </div>\n    );\n});\nAccordionTrigger.displayName = \"AccordionTrigger\";\n\nconst AccordionContent = forwardRef<HTMLDivElement, HTMLProps<HTMLDivElement>>(({ children, className = \"\", ...props }, ref) => {\n    const context = useContext(IsOpenContext);\n    if (!context) throw new Error('AccordionContent must be used within an AccordionItem');\n    const { isOpen } = context;\n    return (\n        <div className={cn('grid transition-[grid-template-rows]', isOpen ? \"grid-rows-[1fr]\" : \"grid-rows-[0fr]\", className)}>\n            <div className={\"overflow-hidden\"} >\n                <div className=\"px-4 py-2 border-t\">\n                    {children}\n                </div>\n            </div>\n        </div>\n    );\n});\nAccordionContent.displayName = \"AccordionContent\";\n\nconst IsOpenContext = createContext<{\n    isOpen: boolean;\n    setIsOpen: React.Dispatch<React.SetStateAction<boolean>>;\n} | null>(null)\n\nconst IsOpenProvider: FC<{ children: ReactNode, defaultOpen?: boolean }> = ({ children, defaultOpen = false }) => {\n    const [isOpen, setIsOpen] = useState(defaultOpen)\n    return (\n        <IsOpenContext.Provider value={{ isOpen, setIsOpen }}>\n            {children}\n        </IsOpenContext.Provider>\n    )\n}\n\nexport { Accordion, AccordionContent, AccordionItem, AccordionTrigger };\n\n","targetPath":"/components/ui/accordion/Accordion.tsx"},{"name":"utils.ts","content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","targetPath":"/lib/utils.ts"}],"dependencies":{"dependencies":{"clsx":"^2.1.1","tailwind-merge":"^3.0.1"},"devDependencies":{}}}}