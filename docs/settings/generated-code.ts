interface ComponentPreviews {
    [key: string]: string
}
interface ComponentCodes {
    [key: string]: string
}
const componentPreviews = {
    "accordion": "import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from \"@/components/ui/accordion/Accordion\"\n\nconst AccordionPreview = () => {\n    return (\n        <Accordion>\n            <AccordionItem defaultOpen={true}>\n                <AccordionTrigger>JavaScript</AccordionTrigger>\n                <AccordionContent>\n                    JavaScript is a versatile programming language that is commonly used for web development. It allows developers to create dynamic and interactive web pages by manipulating the DOM and handling events. JavaScript can be used on both the client-side and server-side, making it a powerful tool for full-stack development.\n                </AccordionContent>\n            </AccordionItem>\n            <AccordionItem>\n                <AccordionTrigger>React</AccordionTrigger>\n                <AccordionContent>\n                    React is a JavaScript library for building user interfaces. It allows developers to create large web applications that can update and render efficiently in response to data changes. React components are the building blocks of a React application, and they can be composed to create complex UIs.\n                </AccordionContent>\n            </AccordionItem>\n            <AccordionItem>\n                <AccordionTrigger>Tailwind CSS</AccordionTrigger>\n                <AccordionContent>\n                    Tailwind CSS is a utility-first CSS framework that provides low-level utility classes to build custom designs without writing CSS. It allows developers to apply styles directly in the HTML, making it easy to create responsive and consistent designs. Tailwind's approach encourages a more streamlined and maintainable styling process.\n                </AccordionContent>\n            </AccordionItem>\n        </Accordion>\n    )\n}\n\nexport default AccordionPreview",
    "alert": "import { Alert, AlertDescription, AlertIcon, AlertTitle } from \"@/components/ui/alert/Alert\";\n\nconst AlertPreview: React.FC = () => {\n    return (\n        <div className=\"flex flex-col gap-1\">\n            <Alert>\n                <AlertIcon>ðŸ›ˆ</AlertIcon>\n                <AlertTitle>Information</AlertTitle>\n                <AlertDescription>\n                    Your profile has been updated successfully.\n                </AlertDescription>\n            </Alert>\n            <Alert type='success'>\n                <AlertIcon>âœ”</AlertIcon>\n                <AlertTitle>Success</AlertTitle>\n                <AlertDescription>\n                    Your order has been placed successfully.\n                </AlertDescription>\n            </Alert>\n            <Alert type='danger'>\n                <AlertIcon>!</AlertIcon>\n                <AlertTitle>Error</AlertTitle>\n                <AlertDescription>\n                    There was an error processing your payment.\n                </AlertDescription>\n            </Alert>\n            <Alert type='warning'>\n                <AlertIcon>âš </AlertIcon>\n                <AlertTitle>Warning</AlertTitle>\n                <AlertDescription>\n                    Your password will expire in 3 days.\n                </AlertDescription>\n            </Alert>\n        </div>\n    );\n};\n\nexport default AlertPreview;",
    "alert-dialog": "import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger, } from \"@/components/ui/alert-dialog/AlertDialog\";\n\nconst AlertDialogPreview = () => {\n    return (\n        <AlertDialog>\n            <AlertDialogTrigger>Open Dialog</AlertDialogTrigger>\n            <AlertDialogContent>\n                <AlertDialogHeader>\n                    <AlertDialogTitle>Are you sure?</AlertDialogTitle>\n                    <AlertDialogDescription>\n                        This action cannot be undone. This will permanently delete your account\n                        and remove your data from our servers.\n                    </AlertDialogDescription>\n                </AlertDialogHeader>\n                <AlertDialogFooter>\n                    <AlertDialogCancel>Cancel</AlertDialogCancel>\n                    <AlertDialogAction>Continue</AlertDialogAction>\n                </AlertDialogFooter>\n            </AlertDialogContent>\n        </AlertDialog>\n    );\n};\n\nexport default AlertDialogPreview;"
}
const tsxCodes = {
    "accordion": "\"use client\"\n\nimport { createContext, FC, forwardRef, HTMLProps, MouseEvent, ReactNode, useContext, useState } from \"react\";\nimport { cn } from \"@/lib/utils\";\n\nconst Accordion = forwardRef<HTMLDivElement, HTMLProps<HTMLDivElement>>(({ children, className = \"\", ...props }, ref) => {\n    return (\n        <div className={cn(className, \"border rounded-lg first:border-t-0\")} ref={ref} {...props}>\n            {children}\n        </div>\n    );\n})\n\ninterface AccordionItemProps extends HTMLProps<HTMLDivElement> {\n    defaultOpen?: boolean;\n}\nconst AccordionItem = forwardRef<HTMLDivElement, AccordionItemProps>(({ children, defaultOpen = false, className = \"\", ...props }, ref) => {\n    return (\n        <IsOpenProvider defaultOpen={defaultOpen}>\n            <div ref={ref} className={cn(\"border-t\", className)} {...props}>\n                {children}\n            </div>\n        </IsOpenProvider>\n    );\n})\n\nconst AccordionTrigger = forwardRef<HTMLDivElement, HTMLProps<HTMLDivElement>>(({ children, className = \"\", onClick, ...props }, ref) => {\n    const context = useContext(IsOpenContext);\n    if (!context) throw new Error('AccordionTrigger must be used within an AccordionItem');\n    const { isOpen, setIsOpen } = context;\n    function handleClick(e: MouseEvent<HTMLDivElement>) {\n        setIsOpen(!isOpen)\n        onClick && onClick(e)\n    }\n    return (\n        <div onClick={handleClick} className={cn(\"px-4 py-2 flex cursor-pointer justify-between items-center hover:bg-primary/30\", className)} ref={ref} {...props}>\n            <div>\n                {children}\n            </div>\n            <svg\n                style={{\n                    transform: isOpen ? \"rotate(180deg)\" : \"rotate(0deg)\",\n                    transition: \"transform 0.3s\"\n                }}\n                xmlns=\"http://www.w3.org/2000/svg\"\n                className=\"h-5 w-5 ml-auto mr-2\"\n                viewBox=\"0 0 20 20\"\n                fill=\"currentColor\"\n            >\n                <path\n                    fillRule=\"evenodd\"\n                    d=\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\"\n                    clipRule=\"evenodd\"\n                />\n            </svg>\n        </div>\n    );\n})\n\nconst AccordionContent = forwardRef<HTMLDivElement, HTMLProps<HTMLDivElement>>(({ children, className = \"\", ...props }, ref) => {\n    const context = useContext(IsOpenContext);\n    if (!context) throw new Error('AccordionContent must be used within an AccordionItem');\n    const { isOpen } = context;\n    return (\n        <div className={cn('grid transition-[grid-template-rows]', isOpen ? \"grid-rows-[1fr]\" : \"grid-rows-[0fr]\", className)}>\n            <div className={\"overflow-hidden\"} >\n                <div className=\"px-4 py-2 border-t\">\n                    {children}\n                </div>\n            </div>\n        </div>\n    );\n})\n\nconst IsOpenContext = createContext<{\n    isOpen: boolean;\n    setIsOpen: React.Dispatch<React.SetStateAction<boolean>>;\n} | null>(null)\n\nconst IsOpenProvider: FC<{ children: ReactNode, defaultOpen?: boolean }> = ({ children, defaultOpen = false }) => {\n    const [isOpen, setIsOpen] = useState(defaultOpen)\n    return (\n        <IsOpenContext.Provider value={{ isOpen, setIsOpen }}>\n            {children}\n        </IsOpenContext.Provider>\n    )\n}\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent };\n",
    "alert": "import React, { forwardRef, HTMLProps } from 'react';\nimport { cn } from '@/lib/utils'; // Import the cn function\n\ninterface AlertProps extends HTMLProps<HTMLDivElement> {\n    type?: 'default' | 'success' | 'danger' | 'warning';\n}\n// Alert component\nconst Alert = forwardRef<HTMLDivElement, AlertProps>(({ children, className = \"\", type = 'default', ...props }, ref) => {\n    return (\n        <div ref={ref} className={cn(\"relative p-3 mb-4 rounded-lg\", getAlertStyles(type), className)} role=\"alert\" {...props}>\n            {children}\n        </div>\n    );\n});\n\n// AlertIcon component\nconst AlertIcon = forwardRef<HTMLDivElement, HTMLProps<HTMLDivElement>>(({ children, className = \"\", ...props }, ref) => {\n  return (\n    <div ref={ref} className={cn(\"absolute w-[2.5rem] text-3xl h-[2.5rem] flex justify-center items-center\", className)} {...props}>\n      {children}\n    </div>\n  );\n});\n\n// AlertTitle component\nconst AlertTitle = forwardRef<HTMLHeadingElement, HTMLProps<HTMLHeadingElement>>(({ children, className = \"\", ...props }, ref) => {\n  return (\n    <h3 ref={ref} className={cn(\"ml-12 font-semibold\", className)} {...props}>\n      {children}\n    </h3>\n  );\n});\n\n// AlertDescription component\nconst AlertDescription = forwardRef<HTMLDivElement, HTMLProps<HTMLDivElement>>(({ children, className = \"\", ...props }, ref) => {\n  return (\n    <div ref={ref} className={cn(\"ml-12\", className)} {...props}>\n      {children}\n    </div>\n  );\n});\n\n// Utility function to get styles based on alert type\nconst getAlertStyles = (type: 'default' | 'success' | 'danger' | 'warning') => {\n  switch (type) {\n    case 'success':\n      return 'bg-green-100 text-green-700';\n    case 'danger':\n      return 'bg-red-100 text-red-700';\n    case 'warning':\n      return 'bg-yellow-100 text-yellow-700';\n    default:\n      return 'bg-background text-foreground';\n  }\n};\n\nexport { Alert, AlertIcon, AlertTitle, AlertDescription, getAlertStyles };",
    "alert-dialog": "\"use client\" // Directive to indicate that this file is a client-side component if using NextJs.\n\nimport { createContext, forwardRef, HTMLProps, useContext, useState, ReactNode, FC } from 'react';\nimport { cn } from '@/lib/utils';\n\n// Context to manage dialog open/close state\nconst AlertDialogContext = createContext<{\n    isOpen: boolean;\n    setIsOpen: (open: boolean) => void;\n} | null>(null);\n\n// Provider component to manage dialog state\nconst AlertDialogProvider: FC<{ children: ReactNode }> = ({ children }) => {\n    const [isOpen, setIsOpen] = useState(false);\n    return (\n        <AlertDialogContext.Provider value={{ isOpen, setIsOpen }}>\n            {children}\n        </AlertDialogContext.Provider>\n    );\n};\n\n// Main AlertDialog component with state management\nconst AlertDialog = forwardRef<HTMLDivElement, HTMLProps<HTMLDivElement>>(({ children, ...props }, ref) => {\n    return (\n        <AlertDialogProvider>\n            <div ref={ref} {...props}>\n                {children}\n            </div>\n        </AlertDialogProvider>\n    );\n});\n\n// Trigger button to open the dialog\nconst AlertDialogTrigger = forwardRef<HTMLDivElement, HTMLProps<HTMLDivElement>>(({ children, onClick, className = \"\", ...props }, ref) => {\n    const context = useContext(AlertDialogContext);\n    if (!context) throw new Error('AlertDialogTrigger must be used within AlertDialog');\n    \n    return (\n        <div\n            ref={ref}\n            className={cn(\"px-4 py-2 rounded\", className)}\n            onClick={(e) => {\n                context.setIsOpen(true);\n                onClick?.(e);\n            }}\n            {...props}\n        >\n            {children}\n        </div>\n    );\n});\n\n// Content wrapper for the dialog\nconst AlertDialogContent = forwardRef<HTMLDivElement, HTMLProps<HTMLDivElement>>(({ children, className = \"\", ...props }, ref) => {\n    const context = useContext(AlertDialogContext);\n    if (!context) throw new Error('AlertDialogContent must be used within AlertDialog');\n    \n    if (!context.isOpen) return null;\n    \n    return (\n        <div className=\"fixed inset-0 z-50 flex items-center justify-center\">\n            <div className=\"fixed inset-0 bg-black/50\" />\n            <div\n                ref={ref}\n                className={cn(\"relative bg-white rounded-lg shadow-lg p-6 max-w-md w-full mx-4\", className)}\n                {...props}\n            >\n                {children}\n            </div>\n        </div>\n    );\n});\n\n// Header section of the dialog\nconst AlertDialogHeader = forwardRef<HTMLDivElement, HTMLProps<HTMLDivElement>>(({ children, className = \"\", ...props }, ref) => (\n    <div ref={ref} className={cn(\"mb-4\", className)} {...props}>\n        {children}\n    </div>\n));\n\n// Title component\nconst AlertDialogTitle = forwardRef<HTMLHeadingElement, HTMLProps<HTMLHeadingElement>>(({ children, className = \"\", ...props }, ref) => (\n    <h2 ref={ref} className={cn(\"text-lg font-semibold\", className)} {...props}>\n        {children}\n    </h2>\n));\n\n// Description component\nconst AlertDialogDescription = forwardRef<HTMLParagraphElement, HTMLProps<HTMLParagraphElement>>(({ children, className = \"\", ...props }, ref) => (\n    <p ref={ref} className={cn(\"text-sm text-gray-600\", className)} {...props}>\n        {children}\n    </p>\n));\n\n// Footer section of the dialog\nconst AlertDialogFooter = forwardRef<HTMLDivElement, HTMLProps<HTMLDivElement>>(({ children, className = \"\", ...props }, ref) => (\n    <div ref={ref} className={cn(\"mt-6 flex justify-end space-x-2\", className)} {...props}>\n        {children}\n    </div>\n));\n\n// Cancel button\nconst AlertDialogCancel = forwardRef<HTMLDivElement, HTMLProps<HTMLDivElement>>(({ children, onClick, className = \"\", ...props }, ref) => {\n    const context = useContext(AlertDialogContext);\n    if (!context) throw new Error('AlertDialogCancel must be used within AlertDialog');\n    \n    return (\n        <div\n            ref={ref}\n            className={cn(\"px-4 py-2 text-gray-700 bg-gray-100 rounded hover:bg-gray-200\", className)}\n            onClick={(e) => {\n                context.setIsOpen(false);\n                onClick?.(e);\n            }}\n            {...props}\n        >\n            {children}\n        </div>\n    );\n});\n\n// Action button\nconst AlertDialogAction = forwardRef<HTMLDivElement, HTMLProps<HTMLDivElement>>(({ children, onClick, className = \"\", ...props }, ref) => {\n    const context = useContext(AlertDialogContext);\n    if (!context) throw new Error('AlertDialogAction must be used within AlertDialog');\n    \n    return (\n        <div\n            ref={ref}\n            className={cn(\"px-4 py-2 text-white bg-blue-600 rounded hover:bg-blue-700\", className)}\n            onClick={(e) => {\n                context.setIsOpen(false);\n                onClick?.(e);\n            }}\n            {...props}\n        >\n            {children}\n        </div>\n    );\n});\n\nexport {\n    AlertDialog,\n    AlertDialogTrigger,\n    AlertDialogContent,\n    AlertDialogHeader,\n    AlertDialogTitle,\n    AlertDialogDescription,\n    AlertDialogFooter,\n    AlertDialogAction,\n    AlertDialogCancel,\n};"
}

export { componentPreviews, tsxCodes }